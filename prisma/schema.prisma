// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id         String   @id @default(cuid(2))
  username   String   @unique
  password   String
  name       String
  email      String   @unique
  phone      String   @unique
  mobile     String?  @db.VarChar(10)
  is_set_pw  Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Booking Booking[]
}

model Customer {
  id         String   @id @default(cuid(2))
  name       String
  email      String?  @unique
  mobile     String   @unique @db.VarChar(10)
  gender     String   @db.VarChar(6)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Booking Booking[]
}

model Room {
  id              String   @id @default(cuid(2))
  number          String
  is_available    Boolean  @default(true)
  type_id         String
  type            Type     @relation(fields: [type_id], references: [id], onDelete: NoAction)
  price_per_night Float
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  Booking Booking[]
}

model Type {
  id         String   @id @default(cuid(2))
  name       String
  detail     String?
  rooms      Room[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Booking {
  id             String   @id @default(cuid(2))
  customer_id    String
  customer       Customer @relation(fields: [customer_id], references: [id], onDelete: NoAction)
  employee_id    String
  employee       Employee @relation(fields: [employee_id], references: [id], onDelete: NoAction)
  room_id        String
  room           Room     @relation(fields: [room_id], references: [id], onDelete: NoAction)
  payment_id     String   @unique
  payment        Payment  @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  stay_duration  Int
  check_in_date  DateTime
  check_out_date DateTime
  status         String   @db.VarChar(10)
  total_price    Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Payment {
  id          String    @id @default(cuid(2))
  booking     Booking?
  status      String    @db.VarChar(10)
  total_price Float
  discount    Float
  total_paid  Float
  paid_method String    @db.VarChar(10)
  paid_date   DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}
