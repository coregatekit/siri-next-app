// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id        String    @id @default(cuid(2))
  username  String    @unique
  password  String
  name      String
  email     String    @unique
  mobile    String?   @db.VarChar(10)
  isSetPw   Boolean   @default(false) @map("is_set_pw")
  isAdmin   Boolean   @default(false) @map("is_admin")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Booking   Booking[]
}

model Customer {
  id        String   @id @default(cuid(2))
  name      String
  email     String?  @unique
  mobile    String   @unique @db.VarChar(10)
  gender    String   @db.VarChar(6)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Booking Booking[]
}

model Room {
  id            String   @id @default(cuid(2))
  number        String
  isAvailable   Boolean  @default(true) @map("is_available")
  typeId        String   @map("type_id")
  type          Type     @relation(fields: [typeId], references: [id], onDelete: NoAction)
  pricePerNight Float    @map("price_per_night")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  Booking Booking[]
}

model Type {
  id        String   @id @default(cuid(2))
  name      String
  detail    String?
  rooms     Room[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Booking {
  id           String   @id @default(cuid(2))
  customerId   String   @map("customer_id")
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: NoAction)
  employeeId   String   @map("employee_id")
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction)
  roomId       String   @map("room_id")
  room         Room     @relation(fields: [roomId], references: [id], onDelete: NoAction)
  paymentId    String   @unique @map("payment_id")
  payment      Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  stayDuration Int      @map("stay_duration")
  checkInDate  DateTime @map("check_in_date")
  checkOutDate DateTime @map("check_out_date")
  status       String   @db.VarChar(10)
  totalPrice   Float    @map("total_price")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
}

model Payment {
  id         String    @id @default(cuid(2))
  booking    Booking?
  status     String    @db.VarChar(10)
  totalPrice Float     @map("total_price")
  discount   Float
  totalPaid  Float     @map("total_paid")
  paidMethod String    @map("paid_method") @db.VarChar(10)
  paidDate   DateTime? @map("paid_date")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
}

model Todo {
  id          String  @id @default(cuid(2))
  title       String
  description String?
  done        Boolean @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}
